# -*- ruby -*-

require 'formula'
require 'fileutils'
require 'json'

module NodeBin
  def npm_bin
    HOMEBREW_PREFIX/"bin/npm"
  end
end

class NPMDownloadStrategy < AbstractDownloadStrategy
  include NodeBin

  def fetch
    ohai "Fetching <%= name %> from npm source"
    cache.cd do
      ENV['NPM_CONFIG_CACHE'] = "#{cache}/npm_cache"
      system "#{npm_bin}", "pack", "<%= name %>@#{npm_version}"
    end
  end

  def cached_location
    Pathname.new("#{cache}/<%= name %>-#{npm_version}.tgz")
  end

  def cache
    @cache ||= HOMEBREW_CACHE
  end

  def npm_version
    return @version if defined?(@version) && @version
    @version = @resource.version if defined?(@resource)
    raise "Unable to determine version; did Homebrew change?" unless @version
    @version
  end

  def clear_cache
    cached_location.unlink if cached_location.exist?
  end
end

class <%= klass %> < Formula
  include NodeBin

  url "<%= name %>", :using => NPMDownloadStrategy
  version "<%= version %>"
  depends_on "node"

  def install
    # Use /usr/local/bin at the front of the path instead of Homebrew shims,
    # which mess with Ruby's own compiler config when building native extensions
    if defined?(HOMEBREW_SHIMS_PATH)
      ENV['PATH'] = ENV['PATH'].sub(HOMEBREW_SHIMS_PATH.to_s, '/usr/local/bin')
    end

    FileUtils.cd(prefix)

    system "#{npm_bin}", "install", cached_download
    raise "npm install '<%= name %>' failed with status #{$?.exitstatus}" unless $?.success?

    bin.rmtree if bin.exist?
    bin.mkpath

    package_path = "#{prefix}/node_modules/<%= name %>"
    package_json = JSON.parse(File.read(File.join(package_path, 'package.json'))) rescue nil
    if package_json && package_json['bin']
      if package_json['bin'].is_a? String
        name = package_json['name']
        relative_path = package_json['bin']
        FileUtils.symlink(File.join(package_path, relative_path), File.join(bin, name))
      else
        package_json['bin'].each do |name, relative_path|
          FileUtils.symlink(File.join(package_path, relative_path), File.join(bin, name))
        end
      end
    else
      FileUtils.symlink(Dir.glob("#{package_path}/bin/*"), bin)
    end
  end
end
